$(document).ready(function() {

var subscribersdata = {
    labels: [
      <% @subscribersorted.each_pair do |x, y| %>
        "<%= x.gsub('"', '').html_safe %>",
      <% end %>
    ],
    datasets: [
        {
            label: "Top 10 Posts",
            fillColor: "rgba(220,220,220,0.2)",
            strokeColor: "rgba(220,220,220,1)",
            pointColor: "rgba(220,220,220,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
            data: [
              <% @subscribersorted.each_pair do |x, y| %>
                <%= y.to_i %>,
              <% end %>
            ]
        }
    ]
};

var subscribersoptions = {

    ///Boolean - Whether grid lines are shown across the chart
    scaleShowGridLines : true,

    //String - Colour of the grid lines
    scaleGridLineColor : "rgba(0,0,0,.05)",

    //Number - Width of the grid lines
    scaleGridLineWidth : 1,

    //Boolean - Whether to show horizontal lines (except X axis)
    scaleShowHorizontalLines: true,

    //Boolean - Whether to show vertical lines (except Y axis)
    scaleShowVerticalLines: true,

    //Boolean - Whether the line is curved between points
    bezierCurve : true,

    //Number - Tension of the bezier curve between points
    bezierCurveTension : 0.4,

    //Boolean - Whether to show a dot for each point
    pointDot : true,

    //Number - Radius of each point dot in pixels
    pointDotRadius : 4,

    //Number - Pixel width of point dot stroke
    pointDotStrokeWidth : 1,

    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
    pointHitDetectionRadius : 20,

    //Boolean - Whether to show a stroke for datasets
    datasetStroke : true,

    //Number - Pixel width of dataset stroke
    datasetStrokeWidth : 2,

    //Boolean - Whether to fill the dataset with a colour
    datasetFill : true,

    //Start the scale at 0 instead of the lowest upvote count
    scaleBeginAtZero: true
};

//remake the line chart to fix the label issue, this shouldn't be required but chart.js sux
  Chart.types.Line.extend({
     name : "AltLine",

     initialize : function(data) {
        Chart.types.Line.prototype.initialize.apply(this, arguments);
        this.scale.draw = function() {
           this.endPoint = this.height - 10;
           Chart.Scale.prototype.draw.apply(this, arguments);
        };
     }
  });

//ugly hack to clear old chart on refresh
  $('#subscriberschart').remove();
  $('#subscriberschartcontainer').append('<canvas id="subscriberschart"></canvas>');

//draw the applicant per day line chart
var cty = document.getElementById("subscriberschart").getContext("2d");
cty.canvas.width  = $('#subscriberschartcontainer').innerWidth() - 50;
cty.canvas.height  = "300";
var SubscribersChart = new Chart(cty).AltLine(subscribersdata, subscribersoptions);

//on click of a point on the chart, do something
cty.canvas.onclick = function(evt){
    var activePoints = SubscribersChart.getPointsAtEvent(evt);
    // => activePoints is an array of points on the canvas that are at the same position as the click event.
    // Ex. activePoints[0].label will give you the label of the currently clicked on point
    $.post( "title", {title: activePoints[0].label});
};

var doughnutoptions = {
    //Boolean - Whether we should show a stroke on each segment
    segmentShowStroke : true,

    //String - The colour of each segment stroke
    segmentStrokeColor : "#fff",

    //Number - The width of each segment stroke
    segmentStrokeWidth : 2,

    //Number - The percentage of the chart that we cut out of the middle
    percentageInnerCutout : 50, // This is 0 for Pie charts

    //Number - Amount of animation steps
    animationSteps : 100,

    //String - Animation easing effect
    animationEasing : "easeOutBounce",

    //Boolean - Whether we animate the rotation of the Doughnut
    animateRotate : true,

    //Boolean - Whether we animate scaling the Doughnut from the centre
    animateScale : false
}


var doughnutdata = [
    {
        value: 300,
        color:"#F7464A",
        highlight: "#FF5A5E",
        label: "Red"
    },
    {
        value: 50,
        color: "#46BFBD",
        highlight: "#5AD3D1",
        label: "Green"
    },
    {
        value: 100,
        color: "#FDB45C",
        highlight: "#FFC870",
        label: "Yellow"
    }
]


//ugly hack to clear old chart on refresh
$('#doughnutchart').remove();
$('#doughnutchartcontainer').append('<canvas id="doughnutchart"></canvas>');

//draw the applicant per day line chart
var ctz = document.getElementById("doughnutchart").getContext("2d");
ctz.canvas.width  = $('#doughnutchartcontainer').innerWidth() - 50;
ctz.canvas.height  = "300";
var myDoughnutChart = new Chart(ctz).Doughnut(doughnutdata,doughnutoptions);


var baroptions = {
    //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
    scaleBeginAtZero : true,

    //Boolean - Whether grid lines are shown across the chart
    scaleShowGridLines : true,

    //String - Colour of the grid lines
    scaleGridLineColor : "rgba(0,0,0,.05)",

    //Number - Width of the grid lines
    scaleGridLineWidth : 1,

    //Boolean - Whether to show horizontal lines (except X axis)
    scaleShowHorizontalLines: true,

    //Boolean - Whether to show vertical lines (except Y axis)
    scaleShowVerticalLines: true,

    //Boolean - If there is a stroke on each bar
    barShowStroke : true,

    //Number - Pixel width of the bar stroke
    barStrokeWidth : 2,

    //Number - Spacing between each of the X value sets
    barValueSpacing : 5,

    //Number - Spacing between data sets within X values
    barDatasetSpacing : 1
}
//figure out the day of the week so we can base our chart labels on today
var d = new Date();
var weekday = new Array(7);
weekday[-6] = "Monday";
weekday[-5] = "Tuesday";
weekday[-4] = "Wednesday";
weekday[-3] = "Thursday";
weekday[-2] = "Friday";
weekday[-1] = "Saturday";
weekday[0]=  "Sunday";
weekday[1] = "Monday";
weekday[2] = "Tuesday";
weekday[3] = "Wednesday";
weekday[4] = "Thursday";
weekday[5] = "Friday";
weekday[6] = "Saturday";

var bardata = {
//label each day of the week by subtracting a day from today and then matching it to the above array
    labels: [weekday[d.getDay() - 6], weekday[d.getDay() - 5], weekday[d.getDay() - 4], weekday[d.getDay() - 3], weekday[d.getDay() - 2], weekday[d.getDay() - 1], weekday[d.getDay()]],
    
    datasets: [
        {
            label: "My dataset",
            fillColor: "rgba(151,187,205,0.5)",
            strokeColor: "rgba(151,187,205,0.8)",
            highlightFill: "rgba(151,187,205,0.75)",
            highlightStroke: "rgba(151,187,205,1)",
            data: [28, 48, 40, 19, 86, 27, 90]
        }
    ]
};

//ugly hack to clear old chart on refresh
$('#barchart').remove();
$('#barchartcontainer').append('<canvas id="barchart"></canvas>');

//draw the applicant per day line chart
var cta = document.getElementById("barchart").getContext("2d");
cta.canvas.width  = $('#barchartcontainer').innerWidth() - 50;
cta.canvas.height  = "300";
var myBarChart = new Chart(cta).Bar(bardata,baroptions);


var polaroptions = {
    //Boolean - Show a backdrop to the scale label
    scaleShowLabelBackdrop : true,

    //String - The colour of the label backdrop
    scaleBackdropColor : "rgba(255,255,255,0.75)",

    // Boolean - Whether the scale should begin at zero
    scaleBeginAtZero : true,

    //Number - The backdrop padding above & below the label in pixels
    scaleBackdropPaddingY : 2,

    //Number - The backdrop padding to the side of the label in pixels
    scaleBackdropPaddingX : 2,

    //Boolean - Show line for each value in the scale
    scaleShowLine : true,

    //Boolean - Stroke a line around each segment in the chart
    segmentShowStroke : true,

    //String - The colour of the stroke on each segement.
    segmentStrokeColor : "#fff",

    //Number - The width of the stroke value in pixels
    segmentStrokeWidth : 2,

    //Number - Amount of animation steps
    animationSteps : 100,

    //String - Animation easing effect.
    animationEasing : "easeOutBounce",

    //Boolean - Whether to animate the rotation of the chart
    animateRotate : true,

    //Boolean - Whether to animate scaling the chart from the centre
    animateScale : false
}


var polardata = [
    {
        value: 300,
        color:"#F7464A",
        highlight: "#FF5A5E",
        label: "Red"
    },
    {
        value: 350,
        color: "#46BFBD",
        highlight: "#5AD3D1",
        label: "Green"
    },
    {
        value: 400,
        color: "#FDB45C",
        highlight: "#FFC870",
        label: "Yellow"
    },
    {
        value: 450,
        color: "#949FB1",
        highlight: "#A8B3C5",
        label: "Grey"
    },
    {
        value: 500,
        color: "#4D5360",
        highlight: "#616774",
        label: "Dark Grey"
    },
    {
        value: 550,
        color:"#F7464A",
        highlight: "#FF5A5E",
        label: "Red"
    },
    {
        value: 600,
        color: "#46BFBD",
        highlight: "#5AD3D1",
        label: "Green"
    },
    {
        value: 650,
        color: "#FDB45C",
        highlight: "#FFC870",
        label: "Yellow"
    },
    {
        value: 700,
        color: "#949FB1",
        highlight: "#A8B3C5",
        label: "Grey"
    },
    {
        value: 750,
        color: "#4D5360",
        highlight: "#616774",
        label: "Dark Grey"
    },
    {
        value: 800,
        color:"#F7464A",
        highlight: "#FF5A5E",
        label: "Red"
    },
    {
        value: 850,
        color: "#46BFBD",
        highlight: "#5AD3D1",
        label: "Green"
    },
    {
        value: 900,
        color: "#FDB45C",
        highlight: "#FFC870",
        label: "Yellow"
    },
    {
        value: 850,
        color: "#949FB1",
        highlight: "#A8B3C5",
        label: "Grey"
    },
    {
        value: 800,
        color: "#4D5360",
        highlight: "#616774",
        label: "Dark Grey"
    },
    {
        value: 750,
        color:"#F7464A",
        highlight: "#FF5A5E",
        label: "Red"
    },
    {
        value: 700,
        color: "#46BFBD",
        highlight: "#5AD3D1",
        label: "Green"
    },
    {
        value: 650,
        color: "#FDB45C",
        highlight: "#FFC870",
        label: "Yellow"
    },
    {
        value: 600,
        color: "#949FB1",
        highlight: "#A8B3C5",
        label: "Grey"
    },
    {
        value: 550,
        color: "#4D5360",
        highlight: "#616774",
        label: "Dark Grey"
    },
    {
        value: 500,
        color:"#F7464A",
        highlight: "#FF5A5E",
        label: "Red"
    },
    {
        value: 450,
        color: "#46BFBD",
        highlight: "#5AD3D1",
        label: "Green"
    },
    {
        value: 400,
        color: "#FDB45C",
        highlight: "#FFC870",
        label: "Yellow"
    },
    {
        value: 350,
        color: "#949FB1",
        highlight: "#A8B3C5",
        label: "Grey"
    }

];

//ugly hack to clear old chart on refresh
$('#polarchart').remove();
$('#polarchartcontainer').append('<canvas id="polarchart"></canvas>');

//draw the applicant per day polar chart
var ctb = document.getElementById("polarchart").getContext("2d");
ctb.canvas.width  = $('#polarchartcontainer').innerWidth() - 50;
ctb.canvas.height  = "300";
var myPolarChart = new Chart(ctb).PolarArea(polardata,polaroptions);

});